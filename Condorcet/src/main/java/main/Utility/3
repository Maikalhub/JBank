package main.Models.Entities;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.google.gson.reflect.TypeToken;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import main.Data.AdminA;
import main.Data.Archive;
import main.Data.Groups;
import main.Data.Works;
import main.Enums.RequestType;
import main.Enums.ResponseStatus;
import main.JDBC.JDBC;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.AnchorPane;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import main.Models.TCP.Request;
import main.Models.TCP.Response;
import main.Utility.ClientSocket;

import java.io.IOException;
import java.net.URL;
import java.sql.*;
import java.util.List;


public class Admin
{
    /// Начальная инициализация данных
    private Client client;  // Ссылка на клиент
    private String username;
    private String password;
    private Stage primaryStage;// Ссылка на основной Stage
    // Кнопки Main //
    /// Мои данные
    @FXML
    private Button mydata;
    /// Активность
    @FXML
    private Button datagroups;
    @FXML
    private Button tasks;
    @FXML
    private Button report;
    @FXML
    private Button archive;
    /// Настройки
    @FXML
    private Button update;
    @FXML
    private Button quetion;
    @FXML
    private Button exit;
    // Сцены //
    @FXML
    /// Сцена "mainpane"
    private AnchorPane mainpane;
    /// Сцена "mydatapane"
    @FXML
    private AnchorPane mydatapane;
    @FXML
    private AnchorPane mydatapane1;
    @FXML
    private Button mydatapane1_addscene;
    @FXML
    private Button mydatapane1_editscene;
    @FXML
    private Text mydatapane1_fio;
    @FXML
    private TextField mydatapane1_login;
    @FXML
    private TextField mydatapane1_numbergroups;
    @FXML
    private TextField mydatapane1_password;
    @FXML
    private TextField mydatapane1_post;
    @FXML
    private TextField mydatapane1_salary;
    @FXML
    private TextField mydatapane1_status;
    @FXML
    private AnchorPane mydatapane2;
    @FXML
    private Button mydatapane2_clear;
    @FXML
    private Button mydatapane2_confirm;
    @FXML
    private TextField mydatapane2_login;
    @FXML
    private TextField mydatapane2_numbergroups;
    @FXML
    private TextField mydatapane2_password;
    @FXML
    private TextField mydatapane2_post;
    @FXML
    private TextField mydatapane2_salary;
    @FXML
    private TextField mydatapane2_status;
    @FXML
    /// Сцена "datagroupspane"
    private AnchorPane datagroupspane;
    @FXML
    private AnchorPane datagroupspane1;
    @FXML
    private Button datagroupspane1_add;
    @FXML
    private Button datagroupspane1_delete;
    @FXML
    private AnchorPane datagroupspane2;
    @FXML
    private Button datagroupspane2_clear;
    @FXML
    private Button datagroupspane2_confirm;
    @FXML
    private TextField datagroupspane2_login;
    @FXML
    private TextField datagroupspane2_numbergroups;
    @FXML
    private TextField datagroupspane2_password;
    @FXML
    private TextField datagroupspane2_post;
    @FXML
    private TextField datagroupspane2_salary;
    @FXML
    private TextField datagroupspane2_sdtatus;
    @FXML
    private AnchorPane datagroupspane3;
    @FXML
    private Button datagroupspane3_clear;
    @FXML
    private Button datagroupspane3_confirm;
    @FXML
    private TextField datagroupspane3_login;
    @FXML
    private TextField datagroupspane3_numbergroups;
    @FXML
    private TextField datagroupspane3_password;
    @FXML
    private TextField datagroupspane3_post;
    @FXML
    private TextField datagroupspane3_salary;
    @FXML
    private TextField datagroupspane3_status;
    /// Сцена "taskspane"
    @FXML
    private AnchorPane taskspane;
    @FXML
    private Button taskspane_add;
    @FXML
    private Button taskspane_delete;
    @FXML
    private Button taskspane_edit;
    /// Сцена "reportpane"
    @FXML
    private AnchorPane reportpane;
    @FXML
    private Button reportpane_add;
    @FXML
    private ChoiceBox<?> reportpane_choosebox;
    @FXML
    private Button reportpane_clear;
    @FXML
    private TextField reportpane_fio;
    /// Сцена "acrhivepane"
    @FXML
    private AnchorPane archivepane;
    @FXML
    private Button archivepane_add;
    @FXML
    private Button archivepane_back;
    @FXML
    private Button archivepane_delete;
    // Сцены //
    //
    @FXML
    private Text fio1;
    @FXML
    private Text fio3;
    @FXML
    private Text fio31;
    //

    // Таблицы //
    /// Таблица "Данные группы" Сцена "Группа"
    @FXML
    private TableView<Groups> datagroupspane_table;
    @FXML
    private TableColumn<Groups, Integer> idColumn;
    @FXML
    private TableColumn<Groups, String> fioColumn;
    @FXML
    private TableColumn<Groups, String> groupNumberColumn;
    @FXML
    private TableColumn<Groups, String> rykColumn;
    /// Таблица "Задачи" Сцена "Задачи"
    @FXML
    private TableView<Works> taskspane_table;
    @FXML
    private TableColumn<Works, Integer> id_column_tasks;
    @FXML
    private TableColumn<Works, String> FIO_column_tasks;
    @FXML
    private TableColumn<Works, String> number_groups_column_tasks;
    @FXML
    private TableColumn<Works, String> ryk_column_tasks;
    @FXML
    private TableColumn<Works, String> work_column_tasks;
    @FXML
    private TableColumn<Works, String> status_column_tasks;
    @FXML
    private TableColumn<Works, Byte> file_column_tasks;
    @FXML
    private TableColumn<Works, String> time_file_column_tasks;
    /// Таблица "Архив" Сцена "Архив"
    @FXML
    private TableView<Archive> archivepane_table;
    @FXML
    private TableColumn<Archive, Integer> archive_id;
    @FXML
    private TableColumn<Archive, String> archive_FIO;
    @FXML
    private TableColumn<Archive, String> archive_number_group;
    @FXML
    private TableColumn<Archive, String> archive_ryk;
    @FXML
    private TableColumn<Archive, String> archive_work;
    @FXML
    private TableColumn<Archive, String> archive_status;
    @FXML
    private TableColumn<Archive, String> archive_accepted;
    @FXML
    private TableColumn<Archive, String> archive_check;
    // Таблицы //
    // ChooseBox //
    /// ChooseBox    Сцена "Отчеты"
    @FXML
    private ChoiceBox<String> report_report_choosebox;
    // ChooseBox //

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// Получение данных после авторизации
    public void Admin_get_login_and_password(String username, String password) throws SQLException
    {
        System.out.println("------------");
        this.username = username;
        this.password = password;

        Client client = new Client();

        client.setLogin(username);
        client.setPassword(password);

        System.out.println(client.getLogin());
        System.out.println(client.getPassword());
        System.out.println("------------");

        // Можно обновить UI или другие действия, если нужно
        // Устанавливаем логин и пароль в поля на UI
        System.out.println("Данные получены");
        System.out.println(username);
        System.out.println(password);
        // Устанавливаем логин и пароль в поля на UI
        System.out.println("Устанавливаем значения логина и пароля в сцене");
        mydatapane1_login.setText(username);
        mydatapane1_password.setText(password);
        System.out.println("Конец");
        System.out.println("Данные переданы для добавления в бд");
        JDBC.connect();
        update_system_all_data(username);
        JDBC.close();
        //
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Database authorization");
        alert.setHeaderText(null);
        alert.setContentText("Данные успешно добавлены");
        alert.showAndWait();
        //
    }

    private void update_system_all_data(String login)
    {
        String query = "SELECT * FROM AdminID WHERE Логин = ?";
        try (PreparedStatement stmt = JDBC.connection.prepareStatement(query)) {
            stmt.setString(1, login);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    // Извлекаем данные из ResultSet
                    String Login = rs.getString("Логин");
                    String FullName = rs.getString("ФИО");
                    String Dol = rs.getString("Должность");
                    String Status = rs.getString("Статус");
                    String Salary = rs.getString("Зарплата");
                    String Numergroups = rs.getString("НомерГруппы");

                    System.out.println(Login);
                    System.out.println(FullName);
                    System.out.println(Dol);
                    System.out.println(Status);
                    System.out.println(Salary);
                    System.out.println(Numergroups);

                    // Устанавливаем данные в элементы интерфейса
                    //login_.setText(Login);
                    mydatapane1_fio.setText(FullName);
                    mydatapane1_post.setText(Dol);
                    mydatapane1_status.setText(Status);
                    mydatapane1_salary.setText(Salary);
                    mydatapane1_numbergroups.setText(Numergroups);

                    responce_all_data(FullName,"Руководитель");
                    // Загружаем данные о группах после получения информации о пользователе
                    //loadGroups(FullName);
                    //loadTasks(FullName);
                    //loadArchive();
                }
                else
                {
                    // Если логин не найден, можно отобразить сообщение
                    showErrorMessage("Пользователь с таким логином не найден.");
                }
            }
        } catch (SQLException e) {
            // Обработка исключений и логирование ошибок
            showErrorMessage("Ошибка при получении данных: " + e.getMessage());
            e.printStackTrace();  // Можно заменить на логирование
        }
    }


    public void responce_all_data(String login, String password) throws SQLException {

        // Создаем объект Client с логином и паролем
        Client client = new Client(login, password);

        // Логируем логин и пароль
        System.out.println("Логин: " + client.getLogin());
        System.out.println("Пароль: " + client.getPassword());

        // Создаем запрос и сериализуем клиента в JSON
        Request requestModel = new Request();
        requestModel.setRequestMessage(new Gson().toJson(client)); // Сериализация клиента
        requestModel.setRequestType(RequestType.SELECT_GROUP); // Устанавливаем тип запроса как SELECT_GROUP

        // Отправляем запрос на сервер
        if (ClientSocket.getInstance() != null && ClientSocket.getInstance().getOut() != null) {
            ClientSocket.getInstance().getOut().println(new Gson().toJson(requestModel));
            ClientSocket.getInstance().getOut().flush();
            System.out.println("Запрос отправлен: " + new Gson().toJson(requestModel));
        } else {
            System.out.println("Ошибка: сокет не инициализирован.");
            return;
        }

        // Получаем ответ от сервера
        if (ClientSocket.getInstance() != null && ClientSocket.getInstance().getInStream() != null) {
            String serverResponse = null;
            try {
                serverResponse = ClientSocket.getInstance().getInStream().readLine();
            } catch (IOException e) {
                System.err.println("Ошибка при получении ответа от сервера: " + e.getMessage());
                return;
            }

            if (serverResponse != null) {
                // Выводим ответ от сервера в консоль для отладки
                System.out.println("Ответ от сервера: " + serverResponse);

                // Преобразуем ответ в объект Response
                Response responseModel = new Gson().fromJson(serverResponse, Response.class);

                // Если ответ успешный, десериализуем массив объектов Groups
                if (responseModel.getResponseStatus() == ResponseStatus.OK) {
                    try {
                        JsonArray responseDataArray = JsonParser.parseString(responseModel.getResponseData()).getAsJsonArray();
                        List<Groups> groupsList = new Gson().fromJson(responseDataArray, new TypeToken<List<Groups>>(){}.getType());

                        // Логируем данные групп
                        System.out.println("Список групп:");
                        for (Groups group : groupsList) {
                            System.out.println("ID: " + group.getGroup_Id() + ", ФИО: " + group.getFIO_() +
                                    ", Номер группы: " + group.getGroup_number() + ", Руководитель: " + group.getRyk());
                        }

                    } catch (Exception e) {
                        System.err.println("Ошибка при десериализации данных: " + e.getMessage());
                    }

                } else {
                    System.out.println("Ошибка при получении данных от сервера: " + responseModel.getResponseMessage());
                }
            } else {
                System.err.println("Ошибка: Пустой ответ от сервера.");
            }
        } else {
            System.out.println("Ошибка: Входной поток не инициализирован.");
        }
    }








    // Методы Main //
    @FXML
    public void update(ActionEvent actionEvent)
    {
    }
    @FXML
    public void quetion(ActionEvent actionEvent)
    {
    }
    @FXML
    public void exit(ActionEvent actionEvent)
    {
        //
        clearUserData();
        // Закрыть текущую сцену
        Stage currentStage = (Stage) exit.getScene().getWindow(); // Change this to any existing button (like exit_button)
        currentStage.close();

        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Back to menu");
        alert.setHeaderText(null);
        alert.setContentText("Вы вернулись в меню");
        alert.showAndWait();

        URL clientFXML = getClass().getResource("/client.fxml");
        if (clientFXML == null) {
            System.out.println("Файл client.fxml не найден");
        } else {
            FXMLLoader loader = new FXMLLoader(clientFXML);
            Parent root = null;
            try {
                root = loader.load();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            Scene scene = new Scene(root);
            Stage stage = new Stage();
            stage.setScene(scene);
            stage.show();
        }
    }
    // Методы Main //
    // Инициализвация данных //
    @FXML
    public void initialize()
    {
        // Инициализвация таблиц //
        /// Настройка столбцов таблицы "Данные группы"
        idColumn.setCellValueFactory(new PropertyValueFactory<>("group_Id"));
        fioColumn.setCellValueFactory(new PropertyValueFactory<>("FIO_"));
        groupNumberColumn.setCellValueFactory(new PropertyValueFactory<>("group_number"));
        rykColumn.setCellValueFactory(new PropertyValueFactory<>("ryk"));
        /// Настройка столбцов таблицы "Задачи"
        // Task ID Column (update to use correct property name)
        id_column_tasks.setCellValueFactory(new PropertyValueFactory<>("task_Id"));
        // FIO Column
        FIO_column_tasks.setCellValueFactory(new PropertyValueFactory<>("task_FIO"));
        // Number Groups Column
        number_groups_column_tasks.setCellValueFactory(new PropertyValueFactory<>("number_groups"));
        // Supervisor (Ryk) Column
        ryk_column_tasks.setCellValueFactory(new PropertyValueFactory<>("ryk_"));
        // Works Column (task description)
        work_column_tasks.setCellValueFactory(new PropertyValueFactory<>("works"));
        // Status Column
        status_column_tasks.setCellValueFactory(new PropertyValueFactory<>("status_works"));
        // File Column (if you're displaying it somehow)
        file_column_tasks.setCellValueFactory(new PropertyValueFactory<>("file"));
        // Time File Column
        time_file_column_tasks.setCellValueFactory(new PropertyValueFactory<>("time_file"));
        /// Настройка столбцов таблицы "Архив"
        // Task ID Column (update to use correct property name)
        archive_id.setCellValueFactory(new PropertyValueFactory<>("task_Id"));
        // FIO Column
        archive_FIO.setCellValueFactory(new PropertyValueFactory<>("task_FIO"));
        // Number Groups Column
        archive_number_group.setCellValueFactory(new PropertyValueFactory<>("number_groups"));
        // Supervisor (Ryk) Column
        archive_ryk.setCellValueFactory(new PropertyValueFactory<>("ryk_"));
        // Works Column (task description)
        archive_work.setCellValueFactory(new PropertyValueFactory<>("works"));
        // Status Column
        archive_status.setCellValueFactory(new PropertyValueFactory<>("status_works"));
        // File Column (if you're displaying it somehow)
        archive_accepted.setCellValueFactory(new PropertyValueFactory<>("accepted_time"));
        // Time File Column
        archive_check.setCellValueFactory(new PropertyValueFactory<>("check_time"));
        // Инициализация таблиц //
        // Инициализация ChooseBox //
        /// ChooseBox "Выбор типа отчета" Сцены "Отчет"//
        // Устанавливаем начальное сообщение
        /*
        report_report_choosebox.getItems().add("Выберите вид отчета");
        // Добавляем другие элементы
        report_report_choosebox.getItems().add("AreaChart");
        report_report_choosebox.getItems().add("BarChart");
        report_report_choosebox.getItems().add("BubbleChart");
        report_report_choosebox.getItems().add("LineChart");
        report_report_choosebox.getItems().add("PineChart");
        // Устанавливаем начальное значение (это сообщение будет видно до того, как пользователь что-то выберет)
        report_report_choosebox.setValue("Выберите вид отчета");
        // Пример слушателя на выбор элемента (если нужно)
        report_report_choosebox.setOnAction(event -> {
            if (report_report_choosebox.getValue().equals("Выберите вид отчета")) {
                // Если пользователь не выбрал вариант, можете вывести сообщение или что-то еще
                System.out.println("Пожалуйста, выберите вид отчета.");
            }
        });

         */
        // Инициализация ChooseBox //
    }
    // Инициализация данных //
    // Отображение сцен //
    @FXML
    public void mydata_scene(ActionEvent actionEvent)
    {
        mydatapane.setVisible(true);
        mydatapane1.setVisible(true);
        mydatapane2.setVisible(false);
        datagroupspane.setVisible(false);
        taskspane.setVisible(false);
        reportpane.setVisible(false);
        archivepane.setVisible(false);
    }
    @FXML
    public void group_edit(ActionEvent actionEvent)
    {
        mydatapane.setVisible(true);
        mydatapane1.setVisible(false);
        mydatapane2.setVisible(true);
        datagroupspane.setVisible(false);
        taskspane.setVisible(false);
        reportpane.setVisible(false);
        archivepane.setVisible(false);
    }
    @FXML
    public void groups_scene(ActionEvent actionEvent)
    {
        mydatapane.setVisible(false);
        datagroupspane.setVisible(true);
        datagroupspane1.setVisible(true);
        datagroupspane2.setVisible(false);
        datagroupspane3.setVisible(false);
        taskspane.setVisible(false);
        reportpane.setVisible(false);
        archivepane.setVisible(false);
    }
    @FXML
    public void groups_delete_(ActionEvent actionEvent)
    {
        mydatapane.setVisible(false);
        mydatapane1.setVisible(false);
        mydatapane2.setVisible(false);
        datagroupspane.setVisible(true);
        datagroupspane1.setVisible(false);
        datagroupspane2.setVisible(true);
        datagroupspane3.setVisible(false);
        taskspane.setVisible(false);
        reportpane.setVisible(false);
        archivepane.setVisible(false);
    }
    @FXML
    public void groups_add_(ActionEvent actionEvent)
    {
        mydatapane.setVisible(false);
        mydatapane1.setVisible(false);
        mydatapane2.setVisible(false);
        datagroupspane.setVisible(true);
        datagroupspane1.setVisible(false);
        datagroupspane2.setVisible(false);
        datagroupspane3.setVisible(true);
        taskspane.setVisible(false);
        reportpane.setVisible(false);
        archivepane.setVisible(false);
    }
    @FXML
    public void tasks_scene(ActionEvent actionEvent)
    {
        mydatapane.setVisible(false);
        datagroupspane.setVisible(false);
        taskspane.setVisible(true);
        reportpane.setVisible(false);
        archivepane.setVisible(false);
    }
    @FXML
    public void report_scene(ActionEvent actionEvent)
    {
        mydatapane.setVisible(false);
        datagroupspane.setVisible(false);
        taskspane.setVisible(false);
        reportpane.setVisible(true);
        archivepane.setVisible(false);
    }
    @FXML
    public void archive_scene(ActionEvent actionEvent)
    {
        mydatapane.setVisible(false);
        datagroupspane.setVisible(false);
        taskspane.setVisible(false);
        reportpane.setVisible(false);
        archivepane.setVisible(true);
    }
    // Отображение сцен //
    // Отображение //
    private void clearUserData()
    {
        // Очистим все поля, связанные с пользователем
        mydatapane1_login.setText("");
        mydatapane1_password.setText("");
        mydatapane1_fio.setText("");
        mydatapane1_post.setText("");
        mydatapane1_salary.setText("");
        mydatapane1_status.setText("");
        mydatapane1_numbergroups.setText("");

        // Можно также сбросить другие поля или данные, если они хранятся в других объектах
        // Например:
        //my_data_table.getItems().clear();
        //tasks_table.getItems().clear();
        //archive_table.getItems().clear();

    }
    /// Метод для отображения ошибок (пример)
    private void showErrorMessage(String message)
    {
        // Здесь вы можете вывести сообщение в Alert или логи
        System.out.println("Ошибка: " + message);
    }
    // Отображение сообщений //
    // Геттеры и Сеттеры //
    public Client getClient()
    {
        return client;
    }
    // Геттеры, если нужно
    public String getUsername()
    {
        return username;
    }
    public String getPassword()
    {
        return password;
    }
    // Метод для установки ссылки на клиента
    public void setClient(Client client)
    {
        this.client = client;
    }
    // Геттеры и Сеттеры //
}
